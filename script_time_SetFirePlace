-- -- Domoticz passes information to scripts through a number of global tables -- -- otherdevices, 
otherdevices_lastupdate and otherdevices_svalues are arrays for all devices: -- 
otherdevices['yourotherdevicename'] = "On" -- otherdevices_lastupdate['yourotherdevicename'] = "2015-12-27 
14:26:40" -- otherdevices_svalues['yourotherthermometer'] = string of svalues -- -- uservariables and 
uservariables_lastupdate are arrays for all user variables: -- uservariables['yourvariablename'] = 'Test 
Value' -- uservariables_lastupdate['yourvariablename'] = '2015-12-27 11:19:22' -- -- other useful details are 
contained in the timeofday table -- timeofday['Nighttime'] = true or false -- timeofday['SunriseInMinutes'] = 
number -- timeofday['Daytime'] = true or false -- timeofday['SunsetInMinutes'] = number -- 
globalvariables['Security'] = 'Disarmed', 'Armed Home' or 'Armed Away' -- -- To see examples of commands see: 
http://www.domoticz.com/wiki/LUA_commands#General -- To get a list of available values see: 
http://www.domoticz.com/wiki/LUA_commands#Function_to_dump_all_variables_supplied_to_the_script -- -- Based on 
your logic, fill the commandArray with device commands. Device name is case sensitive. -- -- commandArray = {} 
-- print ("All based event fired mk"); -- loop through all the devices --for deviceName,deviceValue in 
pairs(otherdevices) do -- if (deviceName=='myDevice') then -- if deviceValue == "On" then -- print("Device is 
On") -- elseif deviceValue == "Off" then -- commandArray['a device name'] = "On" -- 
commandArray['Scene:MyScene'] = "Off" -- end -- end --end function timedifference(timestamp)
  y, m, d, H, M, S = timestamp:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")
  difference = os.difftime(os.time(), os.time{year=y, month=m, day=d, hour=H, min=M, sec=S})
  return difference end commandArray = {}
    -- only run the test if the stovepipe temp was updated in the last ten minutes.
    t_stovepipeupdate = otherdevices_lastupdate['StovePipeT']
    -- print('last time the stove pipe was change' .. tostring(t_stovepipeupdate))
    
    if( timedifference(t_stovepipeupdate) < 600 ) then
        
        temp_pipe = tonumber(otherdevices['StovePipeT'])
        temp_room = tonumber(otherdevices['LivingRoomT'])
    
        temp_room = temp_room + 4
        
        if (temp_pipe > temp_room ) then
            if( otherdevices['FirePlace'] =='Off' ) then
                commandArray['FirePlace']='On'
            end
        else
            if( otherdevices['FirePlace'] =='On' ) then
                commandArray['FirePlace']='Off'
            end
        end
     end return commandArray
